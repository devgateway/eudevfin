<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2013 Development Gateway.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Public License v3.0
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/gpl.html
  
  Contributors:
     mpostelnicu
-->
<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd">

    <!-- Defines the packages where the jpa entity repositories are. These provide access to the entities
        (orgs, transactions,etc) stored in the db
    -->
    <jpa:repositories base-package="org.devgateway.eudevfin.financial.repository" />
    <!-- auditing -->
    <jpa:auditing auditor-aware-ref="simpleAuditorAwareImpl" />
	
    <util:properties id="currencyProperties"
                     location="classpath:/org/devgateway/eudevfin/financial/currencies-metadata.properties"/>

    <!-- Get localhost InetAddress to start Derby network server on it. -->
    <bean id="derbyServerIP"
              class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" lazy-init="true">
        <property name="targetObject">
            <bean class="java.net.InetAddress" />
        </property>
        <property name="targetMethod" value="getByName" />
        <property name="arguments" value="localhost" />
    </bean>

    <!-- Create bean of Derby org.apache.derby.drda.NetworkServerControl class -->
    <bean id="derbyServer" class="org.apache.derby.drda.NetworkServerControl"
              destroy-method="shutdown" lazy-init="true">
        <constructor-arg ref="derbyServerIP" />
        <constructor-arg
            value="#{systemProperties['eudevfin.derby.port']!=null?systemProperties['eudevfin.derby.port']:'1527'}"/>
    </bean>

    <!-- Create Printwriter object to use as log output reader for derby network 
    server -->
    <bean id="pw" class="java.io.PrintWriter" lazy-init="true">
        <constructor-arg>
            <util:constant static-field="java.lang.System.out" />
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <!--  https://jira.springsource.org/browse/SPR-11196 MethodInvokingBean this was added for us :). -->	
    <bean id="startDerby" 
              class="org.springframework.beans.factory.config.MethodInvokingBean" lazy-init="true"
              autowire-candidate="false">
        <property name="targetObject" ref="derbyServer" />
        <property name="targetMethod" value="start" />
        <property name="arguments" ref="pw" />
    </bean>
	

    <!-- Datasource for network mode, this will be instantiated only if network mode derby will be used -->
    <!-- tomcat-jdbc settings taken from here http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency -->
    <bean class="org.apache.tomcat.jdbc.pool.DataSource" id="euDevFinDataSourceNetwork" autowire-candidate="false"
              depends-on="startDerby" lazy-init="true" p:driverClassName="org.apache.derby.jdbc.ClientDriver"
              p:url="jdbc:derby://localhost:#{systemProperties['eudevfin.derby.port']!=null?systemProperties['eudevfin.derby.port']:'1527'}/#{commonProperties['eudevfin.database.name']};create=true"
              p:username="app" p:password="app" p:testWhileIdle="true" p:testOnBorrow="true" p:testOnReturn="false"
              p:validationQuery="SELECT 1" p:validationInterval="30000" p:timeBetweenEvictionRunsMillis="5000"
              p:maxActive="100"
              p:minIdle="10" p:maxIdle="20" p:maxWait="10000" p:initialSize="10" p:removeAbandonedTimeout="60"
              p:removeAbandoned="true"
              p:logAbandoned="true" p:minEvictableIdleTimeMillis="30000" p:jmxEnabled="true"
              p:jdbcInterceptors="ConnectionState;StatementFinalizer;SlowQueryReportJmx(threshold=10000)"
              p:abandonWhenPercentageFull="75" />

    <!-- Datasource for embedded mode, this will be instantiated only if embedded mode derby will be used -->
    <bean class="org.apache.tomcat.jdbc.pool.DataSource" id="euDevFinDataSourceEmbedded" lazy-init="true"
          autowire-candidate="false">
        <property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
        <property name="url" value="jdbc:derby:memory:#{commonProperties['eudevfin.database.name']};create=true" />
        <property name="username" value="app" />
        <property name="password" value="app" />	
    </bean>

    <!-- this the real datasource, a proxy, it is the only one that can get autowired 
    and it behaves like its target(s) which are never autowired candidates -->
    <bean id="euDevFinDataSource" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target"
                          ref="#{'network'.equals(systemProperties['eudevfin.derby.mode'])?'euDevFinDataSourceNetwork':'euDevFinDataSourceEmbedded'}" />
    </bean>
	  
    <!-- initialize a mock jndi builder we use internally to access this datasource 
    from third parties, like CDA -->
    <bean id="simpleJndiBuilder"
              class="org.springframework.mock.jndi.SimpleNamingContextBuilder"
              factory-method="emptyActivatedContextBuilder" destroy-method="deactivate" />

    <!-- invoke a void return factory method of the binder with the parameters 
    jndi url plus the existing datasource reference. This will bind the datasource 
    to the JNDI tree for later lookups This is used to lookup the datasource 
    through JNDI by the CDA module. Alternatively and probably much slower, we 
    could use an XMLA (uses SOAP) channel through spring integration -->
    <bean
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="simpleJndiBuilder" />
        <property name="targetMethod" value="bind" />
        <property name="arguments">
            <list>
                <value type="java.lang.String">java:comp/env/euDevFinDS</value>
                <ref bean="euDevFinDataSource" />
            </list>
        </property>
    </bean>



    <bean id="financialLiquibase" class="liquibase.integration.spring.SpringLiquibase" lazy-init="false"
              depends-on="contextHelper">
        <property name="dataSource" ref="euDevFinDataSource" />
        <property name="changeLog" value="classpath:financialDbChangelog.xml" />
    </bean>

    <bean id="hibernateStatisticsBean" class="org.devgateway.eudevfin.common.hibernate.HibernateStatisticsFactoryBean"/>

    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
        <property name="beans">
            <map>
                <entry key="org.hibernate:name=hibernateStatisticsBean" value-ref="hibernateStatisticsBean"/>
            </map>
        </property>
        <property name="server" ref="mbeanServer"/>
    </bean>


    <!-- Hibernate / JPA related beans -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          depends-on="ehcache">
        <property name="dataSource" ref="euDevFinDataSource" />
        <property name="packagesToScan" value="org.devgateway.eudevfin" />
        <property name="mappingResources" value="META-INF/orm.xml"/>
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
        <property name="jpaProperties">
            <props>
                <prop key="org.hibernate.envers.global_with_modified_flag">true</prop>
                <prop key="org.hibernate.envers.track_entities_changed_in_revision">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
                </prop>
                <prop key="hibernate.generate_statistics">false</prop>
                <prop key="hibernate.show_sql">false</prop>
            </props>
        </property>		
    </bean> 
	
    <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" id="jpaVendorAdapter">
        <property name="showSql" value="false" />
        <property name="generateDdl" value="true"/>
        <property name="database" value="DERBY"/>
        <property name="databasePlatform" value="org.hibernate.dialect.DerbyTenSevenDialect"/>
    </bean>
	
    <bean class="org.springframework.orm.jpa.JpaTransactionManager" id="transactionManager">
        <constructor-arg index="0" ref="entityManagerFactory"></constructor-arg>
    </bean>
	
    <!-- The list of channels that are used throughout the financial module -->
    <int:channel id="findAllAsListTransactionChannel"/>
    <int:channel id="saveTransactionChannel" />
    <int:channel id="deleteTransactionChannel" />
    <int:channel id="findTransactionByIdChannel" />
    <int:channel id="findTransactionBySectorCodePageableChannel" />
    <int:channel id="getFinancialTransactionHistoricalExchangeRatesChannel"/>
    <int:channel id="findTransactionByGeneralSearchPageableChannel"/>
    <int:channel id="findTransactionBySearchFormPageableChannel"/>
    <int:channel id="findTransactionByDonorIdCrsIdActiveChannel"/>
    <int:channel id="findTransactionByReportingYearAndTypeOfFlowNonFlow"/>
   
	
	
    <int:channel id="findCustomTransactionByDraftAndPersistedUserGroupPageableChannel"/>
    <int:channel id="findCustomTransactionByApprovedAndPersistedUserGroupPageableChannel"/>	
    <int:channel id="findCustomTransactionByDraftPageableChannel"/>
    <int:channel id="findCustomTransactionByApprovedPageableChannel"/>
	
    <int:channel id="findCustomTransactionByReportingYearAndDraftFalseChannel"/>
    <int:channel id="findCustomTransactionByReportingYearAndDraftFalseAndFormTypeNotInChannel"/>
    <int:channel id="findCustomTransactionByReportingYearAndApprovedTrueAndFormTypeInChannel"/>
    <int:channel
        id="findCustomTransactionByApprovedTrueAndFormTypeInlOrderByCrsIdentificationNumberAscCreatedDateAscChannel"/>
	
    <int:channel id="findDistinctReportingYearsInTransactionChannel"/>
    <int:channel id="findDistinctStartingYearsInTransactionChannel"/>
    <int:channel id="findDistinctCompletitionYearsInTransactionChannel"/>
    <int:channel id="findDistinctReportingGeopraphyInTransactionChannel"/>
    <int:channel id="findDistinctDonorProjectNumberChannel"/>
    <int:channel id="findDistinctCRSIdChannel"/>
    <int:channel id="findOrganizationByIdChannel" />
    <int:channel id="saveOrganizationChannel" />
    <int:channel id="deleteOrganizationChannel"/>
    <int:channel id="findOrganizationByDacFalse"/>
    <int:channel id="findAllAsListOrganizationChannel"/>
    <int:channel id="findOrganizationByGeneralSearchPageableChannel"/>
    <int:channel id="findUsedOrganizationPaginatedOrganizationChannel"/>
    <int:channel id="findUsedOrgByGeographicFocusChannel"/>
    <int:channel id="findUsedOrgByGeographicFocusAndFinancingInstitutionChannel"/>
    <int:channel id="findOneCustomFinancialTransactionChannel"/>

    <int:channel id="findOrganizationByCodeChannel"/>
    <int:channel id="findOrganizationByCodeAndDonorCodeChannel"/>
    
    <int:channel id="findAllAsListMessageChannel"/>
    <int:channel id="saveMessageChannel"/>
    <int:channel id="deleteMessageChannel"/>
    <int:channel id="findMessageByIdChannel"/>
    <int:channel id="findMessageByToPageableChannel"/>
    <int:channel id="findMessageByToAndReadStatusFalsePageableChannel"/>
    <int:channel id="findMessageByGeneralSearchPageableChannel"/>
    <int:channel id="findByCrsIdentificationNumberChannel"/>  

    <int:channel id="saveCategoryChannel" />
    <int:channel id="findAllAsListCategoryChannel" />
    <int:channel id="findCategoryByIdChannel" />
    <int:channel id="findCategoryByCodeAndClassChannel" />
    <int:channel id="findCategoryByTagCodeChannel" />
    <int:channel id="findCategoryByGeneralSearchAndTagsCodePaginatedChannel" />
    <int:channel id="findCategoryByGeneralSearchAndTagsCodeChannel" />
    <int:channel id="findUsedGeographyPaginatedChannel" />
    <int:channel id="findUsedSectorPaginatedChannel" />
    <int:channel id="findUsedTypeOfAidPaginatedChannel" />
    <int:channel id="findUsedTypeOfFlowBiMultiPaginatedChannel" />
    <int:channel id="findUsedChannelPaginatedChannel" />
	
    <int:channel id="findAllAsListChannelCategoryChannel"/>
    <int:channel id="findChannelCategoryByCodeChannel"/>
    <int:channel id="findChannelCategoryByGeneralSearchAndTagsCodePaginatedChannel"/>
    <int:channel id="findOneChannelCategory"/>
	
    <int:channel id="saveAreaChannel"/>
    <int:channel id="findAllAsListAreaChannel"/>
    <int:channel id="findAreaByIdChannel"/>
    <int:channel id="findAreaByGeneralSearchChannel"/>
    <int:channel id="findByGeneralSearchPageableAreaChannel"/>
    <int:channel id="findUsedAreaPaginatedAreaChannel"/>
    <int:channel id="findAreaByCodeChannel"/>
    <int:channel id="findUsedAreaAsListChannel"/>
    <int:channel id="findTransactionsByProjectIDPageableChannel"/>
	
    <int:channel id="findBySearchPageableCurrencyChannel"/>
    <int:channel id="findByCodeCurrencyChannel"/>

    <!-- 	Router that sends the requests to the appropriate channels where they will usually be handled by ServiceActivators.
           The name of the request channels is taken from the 'requestName' header parameter
    -->
    <int:header-value-router input-channel="getChannel" header-name="requestName"/>

</beans>
